{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/roroblacc/Desktop/App Project/client/node_modules/react-native-tab-view/src/TabViewPagerPan.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { PagerRendererPropType } from \"./TabViewPropTypes\";\nvar DEAD_ZONE = 12;\nvar DefaultTransitionSpec = {\n  timing: Animated.spring,\n  tension: 300,\n  friction: 35\n};\n\nvar TabViewPagerPan = function (_React$Component) {\n  _inherits(TabViewPagerPan, _React$Component);\n\n  var _super = _createSuper(TabViewPagerPan);\n\n  function TabViewPagerPan() {\n    var _this;\n\n    _classCallCheck(this, TabViewPagerPan);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._isMovingHorizontally = function (evt, gestureState) {\n      return Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 2) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 2);\n    };\n\n    _this._canMoveScreen = function (evt, gestureState) {\n      if (_this.props.swipeEnabled === false) {\n        return false;\n      }\n\n      var _this$props$navigatio = _this.props.navigationState,\n          routes = _this$props$navigatio.routes,\n          index = _this$props$navigatio.index;\n      return _this._isMovingHorizontally(evt, gestureState) && (gestureState.dx >= DEAD_ZONE && index >= 0 || gestureState.dx <= -DEAD_ZONE && index <= routes.length - 1);\n    };\n\n    _this._startGesture = function (evt, gestureState) {\n      if (typeof _this.props.onSwipeStart === 'function') {\n        _this.props.onSwipeStart(evt, gestureState);\n      }\n\n      _this.props.panX.stopAnimation();\n    };\n\n    _this._respondToGesture = function (evt, gestureState) {\n      var _this$props$navigatio2 = _this.props.navigationState,\n          routes = _this$props$navigatio2.routes,\n          index = _this$props$navigatio2.index;\n\n      if (gestureState.dx > 0 && index <= 0 || gestureState.dx < 0 && index >= routes.length - 1) {\n        return;\n      }\n\n      _this.props.panX.setValue(gestureState.dx);\n    };\n\n    _this._finishGesture = function (evt, gestureState) {\n      var _this$props = _this.props,\n          navigationState = _this$props.navigationState,\n          layout = _this$props.layout,\n          _this$props$swipeDist = _this$props.swipeDistanceThreshold,\n          swipeDistanceThreshold = _this$props$swipeDist === void 0 ? layout.width / 1.75 : _this$props$swipeDist;\n      var _this$props$swipeVelo = _this.props.swipeVelocityThreshold,\n          swipeVelocityThreshold = _this$props$swipeVelo === void 0 ? 0.15 : _this$props$swipeVelo;\n\n      if (Platform.OS === 'android') {\n        swipeVelocityThreshold /= 1000000;\n      }\n\n      var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : navigationState.index;\n      var nextIndex = currentIndex;\n\n      if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy) && (Math.abs(gestureState.dx) > swipeDistanceThreshold || Math.abs(gestureState.vx) > swipeVelocityThreshold)) {\n        nextIndex = Math.round(Math.min(Math.max(0, currentIndex - gestureState.dx / Math.abs(gestureState.dx)), navigationState.routes.length - 1));\n      }\n\n      if (!isFinite(nextIndex) || !_this.props.canJumpToTab(_this.props.navigationState.routes[nextIndex])) {\n        nextIndex = currentIndex;\n      }\n\n      _this._transitionTo(nextIndex);\n    };\n\n    _this._transitionTo = function (index) {\n      var offset = -index * _this.props.layout.width;\n\n      if (_this.props.animationEnabled === false) {\n        _this.props.panX.setValue(0);\n\n        _this.props.offsetX.setValue(offset);\n\n        return;\n      }\n\n      var timing = DefaultTransitionSpec.timing,\n          transitionConfig = _objectWithoutProperties(DefaultTransitionSpec, [\"timing\"]);\n\n      Animated.parallel([timing(_this.props.panX, _objectSpread(_objectSpread({}, transitionConfig), {}, {\n        toValue: 0\n      })), timing(_this.props.offsetX, _objectSpread(_objectSpread({}, transitionConfig), {}, {\n        toValue: offset\n      }))]).start(function (_ref) {\n        var finished = _ref.finished;\n\n        if (finished) {\n          _this.props.jumpToIndex(index);\n\n          _this._pendingIndex = null;\n        }\n      });\n      _this._pendingIndex = index;\n    };\n\n    return _this;\n  }\n\n  _createClass(TabViewPagerPan, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this._panResponder = PanResponder.create({\n        onMoveShouldSetPanResponder: this._canMoveScreen,\n        onMoveShouldSetPanResponderCapture: this._canMoveScreen,\n        onPanResponderGrant: this._startGesture,\n        onPanResponderMove: this._respondToGesture,\n        onPanResponderTerminate: this._finishGesture,\n        onPanResponderRelease: this._finishGesture,\n        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n          return true;\n        }\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.navigationState.index !== this.props.navigationState.index) {\n        this._transitionTo(this.props.navigationState.index);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          panX = _this$props2.panX,\n          offsetX = _this$props2.offsetX,\n          navigationState = _this$props2.navigationState,\n          layout = _this$props2.layout,\n          children = _this$props2.children;\n      var width = layout.width;\n      var routes = navigationState.routes;\n      var maxTranslate = width * (routes.length - 1);\n      var translateX = Animated.add(panX, offsetX).interpolate({\n        inputRange: [-maxTranslate, 0],\n        outputRange: [-maxTranslate, 0],\n        extrapolate: 'clamp'\n      });\n      return React.createElement(Animated.View, _extends({\n        style: [styles.sheet, width ? {\n          width: routes.length * width,\n          transform: [{\n            translateX: translateX\n          }]\n        } : null]\n      }, this._panResponder.panHandlers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 7\n        }\n      }), React.Children.map(children, function (child, i) {\n        return React.createElement(View, {\n          key: navigationState.routes[i].key,\n          testID: navigationState.routes[i].testID,\n          style: width ? {\n            width: width\n          } : i === navigationState.index ? StyleSheet.absoluteFill : null,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 11\n          }\n        }, i === navigationState.index || width ? child : null);\n      }));\n    }\n  }]);\n\n  return TabViewPagerPan;\n}(React.Component);\n\nTabViewPagerPan.propTypes = _objectSpread(_objectSpread({}, PagerRendererPropType), {}, {\n  configureTransition: PropTypes.func.isRequired,\n  swipeDistanceThreshold: PropTypes.number,\n  swipeVelocityThreshold: PropTypes.number,\n  onSwipeStart: PropTypes.func,\n  onSwipeEnd: PropTypes.func\n});\nTabViewPagerPan.defaultProps = {\n  canJumpToTab: function canJumpToTab() {\n    return true;\n  },\n  configureTransition: function configureTransition() {\n    return DefaultTransitionSpec;\n  },\n  initialLayout: {\n    height: 0,\n    width: 0\n  }\n};\nexport { TabViewPagerPan as default };\nvar styles = StyleSheet.create({\n  sheet: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'stretch'\n  }\n});","map":{"version":3,"sources":["/home/roroblacc/Desktop/App Project/client/node_modules/react-native-tab-view/src/TabViewPagerPan.js"],"names":["React","PropTypes","PagerRendererPropType","DEAD_ZONE","DefaultTransitionSpec","timing","Animated","spring","tension","friction","TabViewPagerPan","_isMovingHorizontally","evt","gestureState","Math","abs","dx","dy","vx","vy","_canMoveScreen","props","swipeEnabled","navigationState","routes","index","length","_startGesture","onSwipeStart","panX","stopAnimation","_respondToGesture","setValue","_finishGesture","layout","swipeDistanceThreshold","width","swipeVelocityThreshold","Platform","OS","currentIndex","_pendingIndex","nextIndex","round","min","max","isFinite","canJumpToTab","_transitionTo","offset","animationEnabled","offsetX","transitionConfig","parallel","toValue","start","finished","jumpToIndex","_panResponder","PanResponder","create","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderGrant","onPanResponderMove","onPanResponderTerminate","onPanResponderRelease","onPanResponderTerminationRequest","prevProps","children","maxTranslate","translateX","add","interpolate","inputRange","outputRange","extrapolate","styles","sheet","transform","panHandlers","Children","map","child","i","key","testID","StyleSheet","absoluteFill","Component","propTypes","configureTransition","func","isRequired","number","onSwipeEnd","defaultProps","initialLayout","height","flex","flexDirection","alignItems"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  PanResponder,\n  StyleSheet,\n  View,\n  Platform,\n} from 'react-native';\nimport { PagerRendererPropType } from './TabViewPropTypes';\nimport type {\n  PagerRendererProps,\n  TransitionConfigurator,\n} from './TabViewTypeDefinitions';\n\ntype GestureEvent = {\n  nativeEvent: {\n    changedTouches: Array<*>,\n    identifier: number,\n    locationX: number,\n    locationY: number,\n    pageX: number,\n    pageY: number,\n    target: number,\n    timestamp: number,\n    touches: Array<*>,\n  },\n};\n\ntype GestureState = {\n  stateID: number,\n  moveX: number,\n  moveY: number,\n  x0: number,\n  y0: number,\n  dx: number,\n  dy: number,\n  vx: number,\n  vy: number,\n  numberActiveTouches: number,\n};\n\ntype GestureHandler = (event: GestureEvent, state: GestureState) => void;\n\ntype Props<T> = PagerRendererProps<T> & {\n  configureTransition?: TransitionConfigurator,\n  swipeDistanceThreshold?: number,\n  swipeVelocityThreshold?: number,\n  onSwipeStart?: GestureHandler,\n  onSwipeEnd?: GestureHandler,\n};\n\nconst DEAD_ZONE = 12;\n\nconst DefaultTransitionSpec = {\n  timing: Animated.spring,\n  tension: 300,\n  friction: 35,\n};\n\nexport default class TabViewPagerPan<T: *> extends React.Component<Props<T>> {\n  static propTypes = {\n    ...PagerRendererPropType,\n    configureTransition: PropTypes.func.isRequired,\n    swipeDistanceThreshold: PropTypes.number,\n    swipeVelocityThreshold: PropTypes.number,\n    onSwipeStart: PropTypes.func,\n    onSwipeEnd: PropTypes.func,\n  };\n\n  static defaultProps = {\n    canJumpToTab: () => true,\n    configureTransition: () => DefaultTransitionSpec,\n    initialLayout: {\n      height: 0,\n      width: 0,\n    },\n  };\n\n  componentWillMount() {\n    this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: this._canMoveScreen,\n      onMoveShouldSetPanResponderCapture: this._canMoveScreen,\n      onPanResponderGrant: this._startGesture,\n      onPanResponderMove: this._respondToGesture,\n      onPanResponderTerminate: this._finishGesture,\n      onPanResponderRelease: this._finishGesture,\n      onPanResponderTerminationRequest: () => true,\n    });\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    if (prevProps.navigationState.index !== this.props.navigationState.index) {\n      this._transitionTo(this.props.navigationState.index);\n    }\n  }\n\n  _isMovingHorizontally = (evt: GestureEvent, gestureState: GestureState) => {\n    return (\n      Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 2) &&\n      Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 2)\n    );\n  };\n\n  _canMoveScreen = (evt: GestureEvent, gestureState: GestureState) => {\n    if (this.props.swipeEnabled === false) {\n      return false;\n    }\n\n    const { navigationState: { routes, index } } = this.props;\n\n    return (\n      this._isMovingHorizontally(evt, gestureState) &&\n      ((gestureState.dx >= DEAD_ZONE && index >= 0) ||\n        (gestureState.dx <= -DEAD_ZONE && index <= routes.length - 1))\n    );\n  };\n\n  _startGesture = (evt: GestureEvent, gestureState: GestureState) => {\n    if (typeof this.props.onSwipeStart === 'function') {\n      this.props.onSwipeStart(evt, gestureState);\n    }\n\n    this.props.panX.stopAnimation();\n  };\n\n  _respondToGesture = (evt: GestureEvent, gestureState: GestureState) => {\n    const { navigationState: { routes, index } } = this.props;\n\n    if (\n      // swiping left\n      (gestureState.dx > 0 && index <= 0) ||\n      // swiping right\n      (gestureState.dx < 0 && index >= routes.length - 1)\n    ) {\n      return;\n    }\n\n    this.props.panX.setValue(gestureState.dx);\n  };\n\n  _finishGesture = (evt: GestureEvent, gestureState: GestureState) => {\n    const {\n      navigationState,\n      layout,\n      swipeDistanceThreshold = layout.width / 1.75,\n    } = this.props;\n\n    let { swipeVelocityThreshold = 0.15 } = this.props;\n\n    if (Platform.OS === 'android') {\n      // on Android, velocity is way lower due to timestamp being in nanosecond\n      // normalize it to have the same velocity on both iOS and Android\n      swipeVelocityThreshold /= 1000000;\n    }\n\n    const currentIndex =\n      typeof this._pendingIndex === 'number'\n        ? this._pendingIndex\n        : navigationState.index;\n\n    let nextIndex = currentIndex;\n\n    if (\n      Math.abs(gestureState.dx) > Math.abs(gestureState.dy) &&\n      Math.abs(gestureState.vx) > Math.abs(gestureState.vy) &&\n      (Math.abs(gestureState.dx) > swipeDistanceThreshold ||\n        Math.abs(gestureState.vx) > swipeVelocityThreshold)\n    ) {\n      nextIndex = Math.round(\n        Math.min(\n          Math.max(\n            0,\n            currentIndex - gestureState.dx / Math.abs(gestureState.dx)\n          ),\n          navigationState.routes.length - 1\n        )\n      );\n    }\n\n    if (\n      !isFinite(nextIndex) ||\n      !this.props.canJumpToTab(this.props.navigationState.routes[nextIndex])\n    ) {\n      nextIndex = currentIndex;\n    }\n\n    this._transitionTo(nextIndex);\n  };\n\n  _transitionTo = (index: number) => {\n    const offset = -index * this.props.layout.width;\n\n    if (this.props.animationEnabled === false) {\n      this.props.panX.setValue(0);\n      this.props.offsetX.setValue(offset);\n      return;\n    }\n\n    const { timing, ...transitionConfig } = DefaultTransitionSpec;\n\n    Animated.parallel([\n      timing(this.props.panX, {\n        ...transitionConfig,\n        toValue: 0,\n      }),\n      timing(this.props.offsetX, {\n        ...transitionConfig,\n        toValue: offset,\n      }),\n    ]).start(({ finished }) => {\n      if (finished) {\n        this.props.jumpToIndex(index);\n        this._pendingIndex = null;\n      }\n    });\n\n    this._pendingIndex = index;\n  };\n\n  _panResponder: any;\n  _pendingIndex: ?number;\n\n  render() {\n    const { panX, offsetX, navigationState, layout, children } = this.props;\n    const { width } = layout;\n    const { routes } = navigationState;\n    const maxTranslate = width * (routes.length - 1);\n    const translateX = Animated.add(panX, offsetX).interpolate({\n      inputRange: [-maxTranslate, 0],\n      outputRange: [-maxTranslate, 0],\n      extrapolate: 'clamp',\n    });\n\n    return (\n      <Animated.View\n        style={[\n          styles.sheet,\n          width\n            ? {\n                width: routes.length * width,\n                transform: [{ translateX }],\n              }\n            : null,\n        ]}\n        {...this._panResponder.panHandlers}\n      >\n        {React.Children.map(children, (child, i) => (\n          <View\n            key={navigationState.routes[i].key}\n            testID={navigationState.routes[i].testID}\n            style={\n              width\n                ? { width }\n                : i === navigationState.index ? StyleSheet.absoluteFill : null\n            }\n          >\n            {i === navigationState.index || width ? child : null}\n          </View>\n        ))}\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  sheet: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'stretch',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}