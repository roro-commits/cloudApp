{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/roroblacc/Desktop/Presentation/cloudApp/client/myComponents/TimeLine.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Timeline from 'react-native-timeline-flatlist';\nimport axios from 'axios';\nimport StartButton from \"./startButton\";\n\nvar RefreshTimeLine = function (_Component) {\n  _inherits(RefreshTimeLine, _Component);\n\n  var _super = _createSuper(RefreshTimeLine);\n\n  function RefreshTimeLine() {\n    var _this;\n\n    _classCallCheck(this, RefreshTimeLine);\n\n    _this = _super.call(this);\n\n    _this.componentWillMount = function () {\n      console.log(\"before MOunt Set Timer\");\n\n      _this.getTimeData();\n    };\n\n    _this.getTimeData = function () {\n      var data;\n      axios.get('http://localhost:8082/api').then(function (response) {\n        data = response.data;\n        console.log('Data has been recived');\n\n        _this.setState({\n          getTimeData: data\n        });\n      }).catch(function () {\n        console.log('data is not recived');\n      });\n      return data;\n    };\n\n    _this.onEndReached = _this.onEndReached.bind(_assertThisInitialized(_this));\n    _this.renderFooter = _this.renderFooter.bind(_assertThisInitialized(_this));\n    _this.onRefresh = _this.onRefresh.bind(_assertThisInitialized(_this));\n    _this.state = {\n      isRefreshing: false,\n      waiting: false,\n      getTimeData: []\n    };\n    return _this;\n  }\n\n  _createClass(RefreshTimeLine, [{\n    key: \"onRefresh\",\n    value: function onRefresh() {\n      var _this2 = this;\n\n      this.setState({\n        isRefreshing: true\n      });\n      this.getTimeData();\n      setTimeout(function () {\n        _this2.setState({\n          data: _this2.data,\n          isRefreshing: false\n        });\n      }, 2000);\n    }\n  }, {\n    key: \"onEndReached\",\n    value: function onEndReached() {\n      if (!this.state.waiting) {\n        this.setState({\n          waiting: true\n        });\n        this.onRefresh();\n      }\n    }\n  }, {\n    key: \"renderFooter\",\n    value: function renderFooter() {\n      if (this.state.waiting) {\n        return React.createElement(ActivityIndicator, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }\n        });\n      } else {\n        return React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }\n        }, \"~\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 8\n        }\n      }, React.createElement(Timeline, {\n        style: styles.list,\n        data: this.state.getTimeData,\n        circleSize: 30,\n        circleColor: \"rgb(45,156,219)\",\n        lineColor: \"rgb(45,156,219)\",\n        timeContainerStyle: {\n          minWidth: 52,\n          marginTop: -5\n        },\n        timeStyle: {\n          textAlign: 'center',\n          backgroundColor: '#ff9797',\n          color: 'white',\n          padding: 5,\n          borderRadius: 13\n        },\n        descriptionStyle: {\n          color: 'gray'\n        },\n        options: {\n          style: {\n            paddingTop: 5\n          },\n          refreshControl: React.createElement(RefreshControl, {\n            refreshing: this.state.isRefreshing,\n            onRefresh: this.onRefresh,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 16\n            }\n          }),\n          renderFooter: this.renderFooter,\n          onEndReached: this.onEndReached\n        },\n        innerCircle: 'dot',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 10\n        }\n      }), React.createElement(StartButton, {\n        text: \"load\",\n        props: this.onRefresh,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 10\n        }\n      }));\n    }\n  }]);\n\n  return RefreshTimeLine;\n}(Component);\n\nexport { RefreshTimeLine as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 10,\n    paddingTop: 20,\n    backgroundColor: 'white'\n  },\n  list: {\n    flex: 1,\n    marginTop: 10\n  }\n});","map":{"version":3,"sources":["/home/roroblacc/Desktop/Presentation/cloudApp/client/myComponents/TimeLine.js"],"names":["React","Component","Timeline","axios","StartButton","RefreshTimeLine","componentWillMount","console","log","getTimeData","data","get","then","response","setState","catch","onEndReached","bind","renderFooter","onRefresh","state","isRefreshing","waiting","setTimeout","styles","container","list","minWidth","marginTop","textAlign","backgroundColor","color","padding","borderRadius","style","paddingTop","refreshControl","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n * @flow\n */\n\n import React, { Component } from 'react';\n import {\n   StyleSheet,\n   Text,\n   View,\n   RefreshControl,\n   ActivityIndicator\n } from 'react-native';\n import Timeline from 'react-native-timeline-flatlist'\n import axios from 'axios'\nimport StartButton from './startButton'\n \n export default class RefreshTimeLine extends Component {\n   constructor(){\n     super()\n     this.onEndReached = this.onEndReached.bind(this)\n     this.renderFooter = this.renderFooter.bind(this)\n     this.onRefresh = this.onRefresh.bind(this)\n \n     this.state = {\n       isRefreshing: false,      \n       waiting: false,\n       getTimeData:[],\n\n     }\n   }\n\n   componentWillMount=() =>{\n    console.log(\"before MOunt Set Timer\")\n\n    this.getTimeData();\n\n  }\n\n    getTimeData =() =>{\n        let data;\n\n        axios.get('http://localhost:8082/api') \n        .then((response) => {\n            data = response.data\n            \n            console.log('Data has been recived');\n            // changing  the revive file for icon \n          this.setState({getTimeData:data})\n\n        })\n\n        .catch(()=>{\n            console.log('data is not recived')\n        })\n  \n         return data\n\n    }\n \n   onRefresh(){\n     this.setState({isRefreshing: true});\n     this.getTimeData();\n     //refresh to initial data\n     setTimeout(() => {\n       //refresh to initial data\n       this.setState({\n         data: this.data,\n         isRefreshing: false\n       });\n     }, 2000);\n   }\n \n   onEndReached() {\n     if (!this.state.waiting) {\n         this.setState({waiting: true});\n         this.onRefresh();\n \n        \n     }\n   }\n \n renderFooter() {\n     if (this.state.waiting) {\n         return <ActivityIndicator />;\n     } else {\n         return <Text>~</Text>;\n     }\n   }\n \n   render() {\n     //'rgb(45,156,219)'\n     return (\n       <View style={styles.container}>\n         <Timeline \n           style={styles.list}\n           data={this.state.getTimeData }\n           circleSize={30}\n           circleColor='rgb(45,156,219)'\n           lineColor='rgb(45,156,219)'\n           timeContainerStyle={{minWidth:52, marginTop: -5}}\n           timeStyle={{textAlign: 'center', backgroundColor:'#ff9797', color:'white', padding:5, borderRadius:13}}\n           descriptionStyle={{color:'gray'}}\n           options={{\n             style:{paddingTop:5},\n             refreshControl: (\n               <RefreshControl\n                 refreshing={this.state.isRefreshing}\n                 onRefresh={this.onRefresh}\n               />\n             ),\n             renderFooter: this.renderFooter,\n             onEndReached: this.onEndReached\n           }}\n           innerCircle={'dot'}\n         />\n         <StartButton text ={\"load\"}  props={this.onRefresh} />\n       </View>\n     );\n   }\n }\n \n const styles = StyleSheet.create({\n   container: {\n     flex: 1,\n     padding: 10,\n         paddingTop:20,\n     backgroundColor:'white'\n   },\n   list: {\n     flex: 1,\n     marginTop:10,\n   },\n });"]},"metadata":{},"sourceType":"module"}